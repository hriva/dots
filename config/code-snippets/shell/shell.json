{
  "setopts": {
    "prefix": "setopts",
    "body": [
      "set -o errexit -o nounset -o pipefail -o errtrace",
      "if [[ \"${TRACE-0}\" == \"1\" ]]; then",
      "    set -o xtrace",
      "fi",
      ""
    ],
    "description": "setopts"
  },
  "as_root": {
    "prefix": "asroot",
    "body": [
      "if [ \"$UID\" -ne 0 ]; then",
      "    echo \"This script must be run as root\"",
      "fi"
    ],
    "description": "as_root"
  },
  "check_deps": {
    "prefix": "binaries",
    "body": [
      "BINARIES=${1:\"curl git wget\"}",
      "for BINARY in $BINARIES; do",
      "    if [ ! \"$(which \"$BINARY\" 2>/dev/null)\" ];then",
      "        echo \"Need to install $BINARY.\"",
      "        exit 2",
      "    fi",
      "done"
    ],
    "description": "check_deps"
  },
  "Bash shebang": {
    "prefix": "shebang",
    "body": [
      "#!/usr/bin/env bash"
    ],
    "description": "bash shebang"
  },
  "Command exists": {
    "prefix": "wcmd",
    "body": [
      "if ! which ${1:command} &>/dev/null; then",
      "   echo \"${1:command} is not installed. Please install it first.\"",
      "   exit 1",
      "fi",
      ""
    ],
    "description": "Command exists"
  },
  "shellharden_array": {
    "prefix": "harray",
    "body": [
      "declare -a ${1:array}",
      "oIFS=$IFS",
      "while IFS= read -r ${2:line}; do",
      "   ${1:array}+=(\"$${2:line}\")",
      "done <\"$${3:filename}\"",
      "unset line",
      "IFS=$oIFS"
    ],
    "description": "Create an array when using shellharden"
  },
  "file_exist": {
    "prefix": "fe",
    "body": [
      "if [[ -f \"${1:file}\" ]]; then",
      "  ${2:do}",
      "fi"
    ],
    "description": "Check if path exist"
  },
  "dir_exist": {
    "prefix": "de",
    "body": [
      "if [[ -f \"${1:dir}\" ]]; then",
      "  ${2:do}",
      "fi"
    ],
    "description": "Check if path exist"
  },
  "argument_number": {
    "prefix": "argnum",
    "body": [
      "if [[ $# ${1:-ne} ${2:1} ]]; then",
      "   echo \"Usage: $0 requires ${2:1} arguments but passed $#\"",
      "   exit 1",
      "fi"
    ],
    "description": "Test argument number"
  },
  "substitute_param": {
    "prefix": "var",
    "body": [
      "\"\\${1:-.}\""
    ],
    "description": "Substitute parameter"
  },
  "env_var_exists_posix": {
    "prefix": "pvarexists",
    "body": [
      "if [ \"$${1:var}\" != \"\" ]; then",
      " ${2:echo 1}",
      "fi"
    ],
    "description": "Check if an envioronment variable exists or is empty"
  },
  "env_var_exists": {
    "prefix": "varex",
    "body": [
      "if [[ -n \"$${1:env_var}\" ]]; then",
      "${2:do}",
      "fi"
    ],
    "description": "Check if an envioronment variable exists or is empty"
  },
  "Array from cmd output": {
    "prefix": "cmdarray",
    "body": [
      "mapfile -t ${1:array} < <(${2:cmd})"
    ],
    "description": "Array from cmd output"
  }
}
