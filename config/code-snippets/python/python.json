{
  "GET request": {
    "prefix": "GET",
    "body": [
      "url = ${1:url}",
      "r = request.get(url)",
      "soup = BeautifulSoup(r.text)"
    ],
    "description": "Python Request",
    "scope": "python"
  },
  "POST request": {
    "prefix": "POST",
    "body": [
      "url = ${1:url}",
      "json  = {}",
      "r = request.post(url, json = json)",
      "soup = BeautifulSoup(r.text)"
    ],
    "description": "Python Post Request",
    "scope": "python"
  },
  "Read .conf file": {
    "prefix": "rconf",
    "body": [
      "import configparser",
      "",
      "config = configparser.ConfigParser()",
      "config.read(\".conf\")"
    ],
    "description": "Read a toml .conf file",
    "scope": "python"
  },
  "Pandas read csv": {
    "prefix": "pdr",
    "body": [
      "${1:df} = pd.read_${2:csv}('${3:file_name}.${2:csv}')",
      "${1:df}.info()$0"
    ],
    "description": "Read in a flat file as pandas dataframe."
  },
  "Get chars from string": {
    "prefix": "rec",
    "body": [
      "import re",
      "list(map(int, re.findall(r'${1:\\d+}', \"${2:S4mpl3}\")))"
    ],
    "description": "Get chars from string"
  },
  "Flatten nested list": {
    "prefix": "lf",
    "body": [
      "sum(${1:nested_list}, [])"
    ],
    "description": "Flatten nested list"
  },
  "Merge dictionaries": {
    "prefix": "dm",
    "body": [
      "{**${1:dict1}, **${2:dict2}}"
    ],
    "description": "Merge dictionaries"
  },
  "Pandas read Clipboard": {
    "prefix": "pdrc",
    "body": [
      "${1:df} = pd.read_clipboard()",
      "${1:df}.info()$0"
    ],
    "description": "Read in copied tabular data on clipboard as pandas dataframe."
  },
  "Pandas DataFrame Profiling": {
    "prefix": "pdprofiling",
    "body": [
      "pandas_profiling.ProfileReport(${1:df})$0"
    ],
    "description": "Visualize pandas dataframe using pandas-profiling."
  },
  "Pandas DataFrame to File": {
    "prefix": "dfsave",
    "body": [
      "${1:df}.to_${2:csv}('${3:file_name}.${2:csv}', index=${3|False, True|})$0"
    ],
    "description": "Save dataframe to a flat file."
  },
  "Pandas DataFrame to compressed file": {
    "prefix": "dfsavezip",
    "body": [
      "${1:df}.to_csv('${2:file_name}.csv.zip', index=${3|False, True|}, compression='zip')$0"
    ],
    "description": "Compress and save dataframe to a zipped flat file (.csv.zip)."
  },
  "Pandas rename column": {
    "prefix": "dfmc",
    "body": [
      "${1:df}['${2:column}'] = ${1:df}['${2:column}']$0"
    ],
    "description": "Modify a pandas column name."
  },
  "Pandas fill nas": {
    "prefix": "pdfill",
    "body": [
      "# Fill empty values",
      "df.fillna({col: df[col].median() for col in df.select_dtypes(include='number').columns} |",
      " {col: df[col].mode()[0] for col in df.select_dtypes(include='object').columns}, inplace=True)",
      ""
    ],
    "description": "Pandas fill nas"
  },
  "Pandas highly corr": {
    "prefix": "pdcor",
    "body": [
      "# Get highly correlated values",
      "df = df.loc[:, df.corr().abs().max() < ${1:0.80}]"
    ],
    "description": "Pandas get highly correlated values"
  },
  "Pandas conditional apply": {
    "prefix": "pdai",
    "body": [
      "df['${1:new_col}'] = df.apply(",
      " lambda x: ${2:x['A'] * 2} if ${3:x['C'] > 0} else ${4:0}, ",
      " axis=1,",
      " )"
    ],
    "description": "Pandas conditional apply"
  },
  "Function w/typehints": {
    "prefix": "def",
    "body": [
      "def ${1:function_name}(${2:arg}:${3:str}=${4:\"foo\"})->${5:None}:",
      "\t$0"
    ],
    "description": "Function structure (Python Language Basics)."
  },
  "Logger setup": {
    "prefix": "lg",
    "body": [
      "import logging",
      "logging.basicConfig(",
      "    format=\"%(asctime)s\\t%(levelname)s: %(message)s\",",
      "    level=logging.INFO,",
      "    datefmt=\"%Y-%m-%d:%H%M\"",
      ")"
    ],
    "description": "Logger setup"
  },
  "Log info": {
    "prefix": "lgi",
    "body": [
      "logging.info(f\"${1:comment}\")"
    ],
    "description": "Log info"
  },
  "Script dir pathlib": {
    "prefix": "here",
    "body": [
      "import pathlib",
      "script_dir = pathlib.Path(__file__).parent.resolve()"
    ],
    "description": "here"
  },
  "Script dir os": {
    "prefix": "here-os",
    "body": [
      "import os",
      "script_dir = os.path.dirname(os.path.abspath(__file__))"
    ],
    "description": "Script path"
  },
  "Hash string": {
    "prefix": "md5",
    "body": [
      "from hashlib import md5",
      "",
      "def hash_string(input_string:str)->str:",
      "    return md5(input_string.encode()).hexdigest()",
      ""
    ],
    "description": "hash_string"
  }
}
